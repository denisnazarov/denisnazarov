{"data":{"site":{"siteMetadata":{"title":"Denis Nazarov","author":"Denis Nazarov"}},"markdownRemark":{"id":"146d66af-5622-583f-acdd-e4746a17bd8d","excerpt":"What comes after open source? Combinatorial innovation is when existing ideas are combined in novel ways to create new ideas. The resulting new ideas can be…","html":"<h1>What comes after open source?</h1>\n<p>Combinatorial innovation is when existing ideas are combined in novel ways to create new ideas. The resulting new ideas can be recombined further to generate more new ideas, ad infinitum. The more ideas explored, the more possibilities present themselves.</p>\n<p>What are the prerequisites for combinatorial innovation? </p>\n<p><strong>Connectivity</strong> between innovators, <strong>unrestricted flow</strong> of ideas, and <strong>incentives</strong> to innovate.</p>\n<p>Connectivity has improved over the centuries through innovation in communication technology. The invention of language, writing, and printing are some technologies that have interconnected humans on an unprecedented scale.</p>\n<p>Innovation of institutions and social structures have also drastically improved connectivity: life in cities, collaboration at universities and firms.</p>\n<p>The unrestricted flow of ideas was catalyzed by the enlightenment and the development of science, which created a culture of sharing and peer review. The most recent torch bearer of this world view is the open source software movement.</p>\n<p>Incentives come from the marketplace for ideas and technological innovation fueled by capitalism.</p>\n<p>Complex ideas are composed of independent building blocks, which naturally leads to <strong>modularity</strong>.</p>\n<p>Modularity creates incentives for participants in the marketplace to specialize and become experts in specific areas, creating fractal competition and improvement, allowing domain experts to divide and conquer specific areas of complexity.</p>\n<p>Software is the ultimate environment for combinatorial innovation because it excels by orders of magnitude in all aforementioned dimensions.</p>\n<p>The internet is the ultimate connectivity network. A culture of open source enables frictionless sharing and reuse of building blocks. A market of billions with interconnected devices is an unprecedented incentive.</p>\n<p>The universality of the turing machine is also the ultimate environment for modularity. Since all computers are turing complete, any piece of code can run on any computer, and can be therefore built upon by any other piece of code. Turing completeness is like a new physics, without the innefficiencies and friction of creating in the real world.</p>\n<h2>Value in software today</h2>\n<p>The analogy breaks down at the service layer of software. Combinatorial innovation in the industrial setting produces products that are useful in and of themselves—a car gets you from point A to point B. </p>\n<p>Early software was similarly industrial in nature and produced tools. The word processor is a digital replacement for a typewriter. The spreadsheet replaces accounting books and the need to do complex math manually. This software is useful in and of itself.</p>\n<p>The software that defines the internet era is less tool-like in its nature and more service-like. </p>\n<p>Looking at the definition of “service” is helpful:</p>\n<blockquote>\n<p>a system supplying a public need such as transport, communications, or utilities such as electricity and water.</p>\n</blockquote>\n<p>Software services aren’t self-contained, single player mode tools, like in early software, where the utility of the tool synonymous with its code.</p>\n<p>Software services are global in nature, and rely on being bootstrapped with a critical mass of data and users for their utility. Their code creates the container that will become valuable when it is filled with users and data.</p>\n<p>To use more percise computer science terminology, software services depend on state. State isn’t part of the code, it is a byproduct of a critical mass of users interacting with a specific instantiation of code.</p>\n<ul>\n<li>social networks</li>\n<li>search engines</li>\n<li>machine learning models</li>\n<li>virtual worlds</li>\n<li>content libraries</li>\n</ul>\n<p>Today, value in software is predominantley in services. While services are built with software, state is the critical element that gives them value.</p>\n<p>Critically, state is the component that is omitted from the combinatorial innovation framework. A service’s incentives are built around monetizing their state, therefore there is <strong>no connectivity</strong> between innovators and the flow of ideas is <strong>restricted</strong>.</p>\n<p>As my parnter Chris <a href=\"https://www.wired.com/story/how-blockchain-can-wrest-the-internet-from-corporations/\">has written</a>, this is why we are seeing a great consolidation in internet services and a lack of innovation.</p>\n<p>As Chris described, DNS is one successful open service that fits into the combinatorial innovation model and has remained open, resulting in a bunch of downsteram innovation.</p>\n<p>Crypto networks are likely to provide the correct incentives to create <strong>open services</strong> in all kinds of areas.</p>\n<p>This is a topic I will cover in a subsequent post.</p>","frontmatter":{"title":"","date":null}}},"pageContext":{"slug":"/what-comes-after-open-source/draft/","previous":{"fields":{"slug":"/reading-piles-of-books/"},"frontmatter":{"title":"Reading piles of books"}},"next":null}}