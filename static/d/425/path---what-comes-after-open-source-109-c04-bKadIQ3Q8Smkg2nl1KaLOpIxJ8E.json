{"data":{"site":{"siteMetadata":{"title":"Denis Nazarov","author":"Denis Nazarov"}},"markdownRemark":{"id":"195cd06f-b066-56e0-be4d-0cb83f579b24","excerpt":"Combinatorial innovation is an invention algorithm by which existing ideas are combined in novel ways to create new ideas. The output is fed back into the…","html":"<p><img src=\"/maze2-ddba308f41f1cdffc93fbfd27ced935d.gif\"></p>\n<p>Combinatorial innovation is an invention algorithm by which existing ideas are combined in novel ways to create new ideas. The output is fed back into the process to generate more new ideas, ad infinitum. </p>\n<p>As more ideas explored, more possibilities present themselves.</p>\n<p>There are some prerequisites for combinatorial innovation to happen effectively.</p>\n<p><strong>Connectivity</strong>: Technologies like language, writing, and printing have interconnected humans at unprecedented scale. Life in cities, collaboration at universities and firms and other innovative social structures and institutions have contributed to connectivity.</p>\n<p><strong>Unrestricted flow of ideas</strong>: The enlightenment and the spread of the scientific method created a culture of sharing and peer review, most recently embodied in the open source software movement.</p>\n<p><strong>Incentives</strong>: Capitalism fuels a a global marketplace for ideas.</p>\n<p>Complex ideas are composed of smaller independent building blocks, leading to <strong>modularity</strong>.</p>\n<p>Participants specialize to divide and conquer improving the modules comprising a technology, creating fractal competition and innovation at every layer. </p>\n<h2>Innovation in software</h2>\n<p>Software is the ultimate environment for combinatorial innovation. It excels, by orders of magnitude, in each of these dimensions.</p>\n<p>The internet is the ultimate connectivity network in terms of speed, cost, and convenience. Open source software culture, predicated on frictionless sharing and reuse of building blocks of code, dominates the software development practice. Billions of users with interconnected devices present an unprecedented addressable market.</p>\n<p>The universality of the turing machine is the ultimate substrate for modularity. Any piece of code can run on any computer, and can be universally recomposed.</p>\n<p>Software is like a new physics, without the innefficiencies and friction of building in the real world.</p>\n<h2>Software tools</h2>\n<p>The nature of pre-internet software is similar to products of the industrial era. I will refer to them as tools—products that are useful in and of themselves.</p>\n<p>In the physical world, I buy a car for the personal utility of getting myself from point A to point B. </p>\n<p>Early software focused on creating superior digital versions of information tools concieved of in the industrial era.</p>\n<table>\n<thead>\n<tr>\n<th>Software tool</th>\n<th>Industrial tool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Word processor (WordPerfect)</td>\n<td>Typewriter</td>\n</tr>\n<tr>\n<td>Spreadsheet (Excel)</td>\n<td>Accounting book</td>\n</tr>\n<tr>\n<td>Graphics editor (Photoshop)</td>\n<td>Darkroom</td>\n</tr>\n</tbody>\n</table>\n<p>Tool-like software has certain key properties.</p>\n<p>It is <strong>self contained</strong>. All that is necessary is to run the code and it’ll do something useful. There are no external dependencies. word processor software, for example, is so useful on its own that <a href=\"https://en.wikipedia.org/wiki/Wang_Laboratories\">successful companies</a> were built selling  single purpose computers.</p>\n<p>It provides <strong>single player utility</strong>. Just like when pounding in nails with a hammer, you don’t need anything or anyone else to use the tool.</p>\n<p>Any instances is <strong>interchangable</strong>. If you forget your laptop, you could borrow mine to retouch your pictures in my instance of Photoshop. </p>\n<p>Not suprisingly, the initial business model for tool-like software was selling licenses. <strong>Piracy</strong> naturally emerged because the tools were so useful, but also easy and inexpensive to copy.</p>\n<p>The open source community rapidly created openly-licensed alternatives to properietry software—free to use and modify. Other software, especially in the broad range powering cloud technology, like databases, began their life as open source from the beginning.</p>\n<h2>Code vs state</h2>\n<p>To understand how the nature of software evolves, it is important to to distinguish between the <strong>logic</strong> (code) of a program and its ability to <strong>remember</strong> (state).</p>\n<p>Early programs were functional in nature—an input leads to an output. A story in your mind is translated to a digital document with the aid of a word processor. A scanned photo is cropped and has text overlaid.</p>\n<p>The ability to remember preceding events or user interactions (state) was primitive and minimal. State also only came from the single user of that program.</p>\n<h2>Internet services</h2>\n<p>Personal computing was about each person having their own computer and running their own instance of a program. The internet introduced in a new class of software with the idea of the server.</p>\n<p>A server runs one program and many people connect to it and interact with it over the internet. </p>\n<p>A server is expected to run and maintain its state indefenitely. User interactions typically result in evolving the state, making the program smarter and more useful.</p>\n<p>Crucially, code in turn becomes less important and defensible. Anyone can run the same code, but the service with lots of users will have a lot more useful state, and will thereby be more desirable to users. This creates a feedback loop that begets more users and more state.</p>\n<p>It is helpful to zoom out and look at the generic definition of “service”:</p>\n<blockquote>\n<p>a system supplying a public need such as transport, communications, or utilities such as electricity and water.</p>\n</blockquote>\n<p>The software that defines the internet era is built from tool-like software (databases, etc), but results in <strong>services</strong>. </p>\n<p>Services are categorically different than tools.</p>\n<table>\n<thead>\n<tr>\n<th>Tool</th>\n<th>Service</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Car</td>\n<td>Transportation network</td>\n</tr>\n<tr>\n<td>Engine</td>\n<td>Power grid</td>\n</tr>\n<tr>\n<td>Personal blog</td>\n<td>Social network</td>\n</tr>\n<tr>\n<td>RSS reader</td>\n<td>Search engine</td>\n</tr>\n<tr>\n<td>Shopify</td>\n<td>Amazon</td>\n</tr>\n<tr>\n<td>TensorFlow</td>\n<td>Google Ads</td>\n</tr>\n<tr>\n<td>Unity</td>\n<td>Dota 2</td>\n</tr>\n<tr>\n<td>Amazon S3</td>\n<td>Instagram</td>\n</tr>\n</tbody>\n</table>\n<p>Software services are global in nature, and rely on being bootstrapped with a critical mass of data and users for their utility. Their code creates the container that will only be useful when it is filled with users and data. Services depend on a healthy network and they require a critical mass. They are more efficient when they singular in nature—fracturing state among multiples services makes each less useful than if they were one (monopolies are a natural and stable state).</p>\n<p>To use more percise computer science terminology, software services depend on <strong>state</strong>. State isn’t part of the code, it is a byproduct of a critical mass of users interacting with a specific instantiation of code. State is distinct to a specific instance of a program and it cannot be copied.</p>\n<h2>Innovation in software services</h2>\n<p>Today, value in software is predominantley in services. While services are built with software, state is the critical element that gives them value.</p>\n<p>State is a component that is <strong>omitted</strong> from the combinatorial innovation framework open source. A service’s incentives are built around monetizing their state. State is the competitive advantage and it needs to be defended by keeping it <strong>proprietary and closed</strong>. There is therefore <strong>no connectivity</strong> between innovators and the flow of ideas is <strong>restricted</strong>.</p>\n<p>As my parnter Chris <a href=\"https://www.wired.com/story/how-blockchain-can-wrest-the-internet-from-corporations/\">has written</a>, this is why we are seeing a great consolidation in internet services and a lack of innovation.</p>\n<p>As Chris described, DNS is one successful open service that fits into the combinatorial innovation model and has remained open, resulting in a bunch of downsteram innovation.</p>\n<p>Crypto networks are likely to provide the correct incentives to create <strong>open services</strong> in all kinds of areas.</p>\n<p>I will discuss open services in more detail in a future post.</p>","frontmatter":{"title":"What comes after open source?","date":"January 11, 2019"}}},"pageContext":{"slug":"/what-comes-after-open-source/","previous":{"fields":{"slug":"/reading-piles-of-books/"},"frontmatter":{"title":"Reading piles of books"}},"next":null}}